services:
  zookeeper:
    image: bitnami/zookeeper:3.8.3
    container_name: witproject-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - witproject-network

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: witproject-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - witproject-network

  calculator:
    image: gcmelo76/calculator:latest
    container_name: witproject-calculator
    ports:
      - "8083:8080"
      - "8086:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MANAGEMENT_SERVER_PORT=8081
    volumes:
      - calculator-logs:/var/log/calculator
    command: >
      sh -c "java -jar app.jar > /var/log/calculator/calculator.log 2>&1"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - witproject-network

  rest:
    image: gcmelo76/rest:latest
    container_name: witproject-rest
    ports:
      - "8084:8080"
      - "8085:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MANAGEMENT_SERVER_PORT=8081
    volumes:
      - rest-logs:/var/log/rest
    command: >
      sh -c "java -jar app.jar > /var/log/rest/rest.log 2>&1"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - witproject-network

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: witproject-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - calculator
      - rest
    networks:
      - witproject-network

  grafana:
    image: grafana/grafana:latest
    container_name: witproject-grafana
    user: "1000"
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./configs/grafana/springboot.json:/var/lib/grafana/dashboards/springboot.json
      - ./configs/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
    restart: unless-stopped
    depends_on:
      - loki
      - prometheus
    networks:
      - witproject-network

  loki:
    image: grafana/loki:2.9.3
    container_name: witproject-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/config.yml
    command: -config.file=/etc/loki/config.yml
    environment:
      - LOKI_DATA_DIR=/tmp/loki
    user: "1000:1000"
    networks:
      - witproject-network

  promtail:
    image: grafana/promtail:2.9.3
    container_name: witproject-promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - calculator-logs:/var/log/calculator:ro
      - rest-logs:/var/log/rest:ro
    ports:
      - "9080:9080"
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - witproject-network


networks:
  witproject-network:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  prometheus-data:
  loki-data:
  grafana-data:
  calculator-logs:
  rest-logs:
  kafka-logs:
